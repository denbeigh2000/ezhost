from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import (
    BuildError as BuildError,
    ImageLoadError as ImageLoadError,
    InvalidArgument as InvalidArgument,
)
from ..utils import parse_repository_tag as parse_repository_tag
from ..utils.json_stream import json_stream as json_stream
from .resource import Collection as Collection, Model as Model
from typing import Any

class Image(Model):
    @property
    def labels(self): ...
    @property
    def short_id(self): ...
    @property
    def tags(self): ...
    def history(self): ...
    def save(self, chunk_size=..., named: bool = ...): ...
    def tag(self, repository, tag: Any | None = ..., **kwargs): ...

class RegistryData(Model):
    image_name: Any
    def __init__(self, image_name, *args, **kwargs) -> None: ...
    @property
    def id(self): ...
    @property
    def short_id(self): ...
    def pull(self, platform: Any | None = ...): ...
    def has_platform(self, platform): ...
    attrs: Any
    def reload(self) -> None: ...

class ImageCollection(Collection):
    model: Any
    def build(self, **kwargs): ...
    def get(self, name): ...
    def get_registry_data(self, name, auth_config: Any | None = ...): ...
    def list(
        self, name: Any | None = ..., all: bool = ..., filters: Any | None = ...
    ): ...
    def load(self, data): ...
    def pull(
        self, repository, tag: Any | None = ..., all_tags: bool = ..., **kwargs
    ): ...
    def push(self, repository, tag: Any | None = ..., **kwargs): ...
    def remove(self, *args, **kwargs) -> None: ...
    def search(self, *args, **kwargs): ...
    def prune(self, filters: Any | None = ...): ...
    def prune_builds(self, *args, **kwargs): ...

def normalize_platform(platform, engine_info): ...
